    def sense(self):  # do not change the name of this function
        Z = []

        # ENTER CODE HERE
        # HINT: You will probably need to use the function atan2()
        for i in range(len(landmarks)):
            bearing = atan2(landmarks[i][0] - self.y,
                            landmarks[i][1] - self.x) - self.orientation
            if add_noise:
                bearing += random.gauss(0.0, self.bearing_noise)
            bearing %= 2.0 * pi
            Z.append(bearing)

        return Z  # Leave this line here. Return vector Z of 4 bearings.


    def measurement_prob(self, measurements):
        predicted_measurements = self.sense(0)
        
        error = 1.0
        for i in range(len(measurements)):
            error_bearing = abs(measurements[i] -  precited_measurement
            error_bearing = (error_bearing + pi) % (2.0 * pi) - pi
