import numpy as np
import pandas as pd

'''Recursion'''
def countDown(n):
    if n<= 0:
        print('whoa\n')
    else:
        print(n)
        countDown(n-1)

countDown(10)

'''USER PROMPT'''
#User prompt
#name = raw_input("What is your name?\n")
#print(name)



'''STRINGS'''
#Characters in Strings
fruit = 'banana'
letter = fruit[2]
for char in fruit:
    print(char)

findLetter =  fruit.find('na')
#print(findLetter)

if 'na' in fruit:
    print('you found a letter')



#String into a list
s = 'spam'
t = list(s)
#print(t)

#The same word is stored in the same String object
a = 'word'
b = 'word'
if a is b:
    print('a and b points to the same object')


'''LISTS'''
#Combining lists
a = [1,2,3]
b = [4,5,6]
a.extend(b)
#print(a)

#Removing lists
t = ['a','b','c']
x = t.pop(0)
#print(x)

del t[0]
#print(t)

t.remove('c')
#print(t)



#List Comps
name = ['frank','dave']
age = [12,33]
y = [(x,y) for x in name for y in age]
print(y)

#Assigning to slices
l = [1,2,3,4,5,6]
l[0:4]=[1] #object assigned to slice must be iterable
print('slice assignment')
print(l)

'''PANDAS'''
#List into DataFrame
a = [1,3,4,5]
p = pd.DataFrame([a])
#print(p)

#GroupBy
data = pd.DataFrame({'nums':[1,3,5,2,6],'num2':[2,4,2,5,7],'type':['odd','odd','odd','even','even'],'level':[1,2,2,3,1]})
grouped =  data['nums'].groupby([data['type'],data['level']])
#if data and map in same dataframe
grouped = data.groupby(['type','level'])
#print(grouped.mean())
#print(grouped.size())


for type, level in data.groupby('type'):
    #print(type)
    #print(level)
    pass

#Groupby into Dictionaries
pieces = dict(list(data.groupby('type')))
print(pieces['odd'])
print('marker')
x = list(data.groupby('type'))[0]
print(x)

#Groupby using functions
def rounder(x):
    import math as math
    return math.ceil(x)
grouped = data['nums'].groupby(rounder)
print('functions')
print(grouped.mean())

'''DICTIONARIES'''
dict = {'a':1,'b':2,'c':10,'d':20}

#Value/Keys in dictionary
print(dict.values())
print(dict.keys())
print(1 in dict.keys())

#List into Dictionaries
lst =[('a',[1,2]),('b',[3,4])]
#dct = dict(lst)


#Dictionary comprehension
a = [('china',4),('usa',1),('russia',2)]
dct = {country: code for country, code in a}
print('dictionary comprehension')
print(dct)

'''TUPLE'''
#Single tuple
a = '1',
#print(type(a))

#String Tuple
a =  tuple('word')
#print(a)

#Zip method
a = tuple('abcdefghi')
b = [0,2,3]
#print(zip(a,b))

#Compare tuples
a=(1,2,3)
b = (4,5,6)
#print(a < b)

#Tupe unpacking/paralell assignment
coord = (19,20)
x,y = coord
print('TUPLE UNPACKING')
print(x)
print(y)


#Slicing: tuple{start:stop:step]
s = 'randomness'
print('tuple slicing')
print(s[::2])

'''CLASS'''
#Default methods
class MyClass(object):

    def __init__(self):
        pass

    def __str__(self):
        pass

    def __str__(self, param):
        pass
    def __add__(self, other):
        pass

    def __cmp__(self, other):
        pass

def getNothing(a=5,b=10):
    return a*b

#Show default values
print('return function default values and parameters')
print(getNothing.__defaults__)
print(getNothing.__code__)


#Strategy Design

#Order (context)
class Order:
    def __init__(self,amount,px):
        self.amount = amount
        self.px = px

#Abstract base class
class Promotion:

    def discount(self,order):
        pass
#Implementations of base class Promotion
class FidelityPromotion(Promotion):
    def discount(self,order):
        return order.px * 0.9

class SeasonalPromotion(Promotion):
    def discount(self,order):
        return order.px * 0.75

class Transanction:
    def __init__(self):
        self.promoDict = {'Fidelity':FidelityPromotion,'Seasonal':SeasonalPromotion}

    def decidePromo(self,promoType):
        return self.promoDict[promoType]



'''NUMPY'''
#initialization
a  = np.array(([1,3,4],[5,22,4],[11,232,2]))
b = np.empty([10,2])
b = np.zeros([10,2])
#print(b)

#Shape
#print(a.shape[0])

#Convert into array, nothin if already array
c = np.asanyarray(a)
#print(type(c))

#Convert datatypes in arrays
d = b.astype(np.float64)
#print(d.dtype)

#Boolean Mask
t = np.array([1,3,4,4,1,1,1])
#print(a[a<3])

#Transpose
print(a.T)

#Unique
print(np.unique(a))

#Combining by rows or columns
a1 = np.array([1,2,3,])
a2 = np.array([4,5,6])
a3 = np.r_[a1,a2]
a4 = np.c_[a1,a2]
zipped = zip(a1,a2)

#Broadcasting
#Normalizing data
arr = np.array([[1,2,3],[4,5,6]])
mean =  arr.mean(axis=1)
mean = mean.reshape((2,1))
scaled = arr - mean
print(scaled)


'''MISC FUNCTIONS'''
#ID function
x = [1,2,4]
print('memory address')
print(id(x))

#IsInstance funtion
x = 'string'
print(isinstance(x,np.ndarray))

#Any and All functions - works on any iterable object
x = [True,False,True]
print(all(x))
print(any(x))

#Help function
help(len)

#Enumerate - prefer this over iterating over index of a list
x =  ['a','b','c','d','e']
for i,letter in enumerate(x):
    print(i)
    print(letter)
