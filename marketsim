"""MC2-P1: Market simulator."""

import pandas as pd
import numpy as np
import datetime as dt
import time as time
import os
from util import get_data, plot_data


def calcBookMV(book):


    #returns a single value
    return 0

def updatBook(book,order):

    if order['Symbol'] in book['Symbol'].tolist():
        if order['Order'] == 'BUY':
            idx = book.ix[book['Symbol']==order['Symbol'],'Position'].index.tolist()
            book.ix[idx,'Position'] = book.ix[idx,'Position'] + order['Shares']
        elif order['Order'] == 'SELL':
            idx = book.ix[book['Symbol']==order['Symbol'],'Position'].index.tolist()
            book.ix[idx,'Position'] = book.ix[idx,'Position'] - order['Shares']
    else:

        price = get_data(['IBM'], pd.date_range(order['Date'],order['Date']),addSPY=False)
        print('pricew')
        price = price.iloc[0,0]
        order = order.tolist()
        newRow = [order[1],order[3],price,price*order[3]]
        newRow = pd.DataFrame([newRow],columns=book.columns.values)
        print(newRow)
        book = pd.concat([book,newRow],ignore_index=True)

    return book



def compute_portvals(orders_file = "./orders/orders.csv", start_val = 1000000):
    # this is the function the autograder will call to test your code
    #TODO: Your code here
    #FIXME: ??

    orders = pd.read_csv(orders_file,sep=',',parse_dates = [0], infer_datetime_format=True)
    print(orders)
    lastOrderRow = orders.shape[0]


    startDate = orders.ix[0,'Date']
    endDate = orders.ix[lastOrderRow-1,'Date']
    datesIndex = pd.date_range(startDate,endDate,freq='1D').tolist()

    portVals = pd.DataFrame(index=datesIndex,columns=['Date','Value'])
    lastPortRow = portVals.shape[0]
    print("portVals")
    print(portVals)

    '''
    for day in portVals.index.values:
        day = pd.Timestamp(day).to_pydatetime()
        #print(type(day))
    '''

    book = pd.DataFrame([['AAPL',1,120,120],['IBM',3,10,30]], columns=['Symbol','Position','Price','Value'])
    print('Book')
    print(book)


    for day in portVals.index.values:
        for i in range(0,lastOrderRow):
            if pd.Timestamp(day).to_pydatetime() == orders.ix[i,'Date'].to_datetime():
                print(day)
                order = orders.ix[i,:]
                book = updatBook(book,order)
        print('new book')
        print(book)



    '''
    # In the template, instead of computing the value of the portfolio, we just
    # read in the value of IBM over 6 months
    start_date = dt.datetime(2008,1,1)
    end_date = dt.datetime(2008,6,1)
    #print('Portvals call')
    portvals = get_data(['IBM'], pd.date_range(start_date, end_date))
    #print(portvals)
    #portvals = portvals[['IBM']]  # remove SPY
    '''

    return portVals

def test_code():
    # this is a helper function you can use to test your code
    # note that during autograding his function will not be called.
    # Define input parameters

    of = "./orders/orders.csv"
    sv = 1000000

    # Process orders
    portvals = compute_portvals(orders_file = of, start_val = sv)
    if isinstance(portvals, pd.DataFrame):
        portvals = portvals[portvals.columns[0]] # just get the first column
    else:
        "warning, code did not return a DataFrame"
    
    # Get portfolio stats
    # Here we just fake the data. you should use your code from previous assignments.
    start_date = dt.datetime(2008,1,1)
    end_date = dt.datetime(2008,6,1)
    cum_ret, avg_daily_ret, std_daily_ret, sharpe_ratio = [0.2,0.01,0.02,1.5]
    cum_ret_SPY, avg_daily_ret_SPY, std_daily_ret_SPY, sharpe_ratio_SPY = [0.2,0.01,0.02,1.5]

    # Compare portfolio against $SPX
    print "Date Range: {} to {}".format(start_date, end_date)
    print
    print "Sharpe Ratio of Fund: {}".format(sharpe_ratio)
    print "Sharpe Ratio of SPY : {}".format(sharpe_ratio_SPY)
    print
    print "Cumulative Return of Fund: {}".format(cum_ret)
    print "Cumulative Return of SPY : {}".format(cum_ret_SPY)
    print
    print "Standard Deviation of Fund: {}".format(std_daily_ret)
    print "Standard Deviation of SPY : {}".format(std_daily_ret_SPY)
    print
    print "Average Daily Return of Fund: {}".format(avg_daily_ret)
    print "Average Daily Return of SPY : {}".format(avg_daily_ret_SPY)
    print
    print "Final Portfolio Value: {}".format(portvals[-1])

if __name__ == "__main__":
    test_code()
