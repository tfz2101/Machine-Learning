def estimate_next_pos(measurement, OTHER = None):
    """Estimate the next (x, y) position of the wandering Traxbot
    based on noisy (x, y) measurements."""
    #OTHER = [(x0,y0), d, angle_0, r, hemisphere]
    
    if OTHER == None:
        xy_estimate = measurement, 
        OTHER = [measurement]
    elif len(OTHER) == 1:
        d = distance_between(OTHER[0], measurement)
        
        x0, y0 = OTHER[0]
        x1, y1 = measurement
        
        opposite = y1 - y0
        angle_0 = asine(float(opposite)/d))
        xy_estimate = measure
        OTHER = [measurement, d, angle_0]
    
    elif len(OTHER) == 3:
        d = distance_between(OTHER[0], measurement)
        
        x0, y0 = OTHER[0]
        x1, y1 = measurement
        
        opposite = y1 - y0
        angle_0 = asine(float(opposite)/d))
        r = angle_0 - OTHER[2]
        
        angle_next = angle_0 + r
        
        x_n = cos(angle_next) * d
        y_n = sin(angle_next) * d
        xy_estimate = (x_n, y_n)
        OTHER = [measurement, d, angle_0, r]

    # You must return xy_estimate (x, y), and OTHER (even if it is None) 
    # in this order for grading purposes.
    return xy_estimate, OTHER 
