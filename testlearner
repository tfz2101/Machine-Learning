"""
Test a learner.  (c) 2015 Tucker Balch
"""

import numpy as np
import math
import LinRegLearner as lrl
import RTLearner as rt
import BagLearner as bl
import pandas as pd
import sys
'''
if __name__=="__main__":
    if len(sys.argv) != 2:
        print "Usage: python testlearner.py <filename>"
        sys.exit(1)
'''
dir1 = "C:\Users\Frank Zhi\Desktop\Python Work\MLT\ML4T_2016Fall-master\ML4T_2016Fall-master\mc3_p1\Data\winequality-white.csv"
dir2 = "L:\OMSCS\MLT\ML4T_2016Fall-master\mc3_p1\Data\winequality-white.csv"
inf = open(dir2) #open(sys.argv[1])
data = np.array([map(float,s.strip().split(',')) for s in inf.readlines()])

'''
# compute how much of the data is training and testing
sample_size =200
#train_rows = math.floor(0.6* data.shape[0])
train_rows = math.floor(0.6* sample_size)
#test_rows = data.shape[0] - train_rows
test_rows = sample_size - train_rows

# separate out training and testing data
trainX = data[:train_rows,0:-1]
trainY = data[:train_rows,-1]
testX = data[train_rows:,0:-1]
testY = data[train_rows:,-1]

print testX.shape
print testY.shape



# create a learner and train it

#learner = rt.RTLearner(leaf_size = 10,verbose = False) # create a LinRegLearner
#learner.addEvidence(trainX, trainY) # train it

kwargs = {"leaf_size":10}
learner = bl.BagLearner(learner=rt.RTLearner,bags=5,**kwargs) # create a LinRegLearner
learner.addEvidence(trainX, trainY) # train it
#learner.query([[1,2,3,4,5,6,7,8,9,10,11],[0,0,0,0,0,0,0,0,0,0,11]])



# evaluate in sample
predY = learner.query(trainX) # get the predictions
rmse = math.sqrt(((trainY - predY) ** 2).sum()/trainY.shape[0])
print
print "In sample results"
print "RMSE: ", rmse
c = np.corrcoef(predY, y=trainY)
print "corr: ", c[0,1]

# evaluate out of sample
predY = learner.query(testX) # get the predictions
rmse = math.sqrt(((testY - predY) ** 2).sum()/testY.shape[0])
print
print "Out of sample results"
print "RMSE: ", rmse
c = np.corrcoef(predY, y=testY)
print "corr: ", c[0,1]
'''





'''
#------------------------------------------------------------------------------------------------------------

#Change leaf size
insample_data = pd.DataFrame(columns=['leaf_size','rmse','correlation'])
outsample_data = pd.DataFrame(columns=['leaf_size','rmse','correlation'])

for leaf_size in range(1,2,1):
    # compute how much of the data is training and testing
    #train_rows = math.floor(0.6* data.shape[0])
    sample_size = len(data)
    train_rows = math.floor(0.6* sample_size)
    #test_rows = data.shape[0] - train_rows
    test_rows = sample_size - train_rows
    # separate out training and testing data
    trainX = data[:train_rows,0:-1]
    trainY = data[:train_rows,-1]
    testX = data[train_rows:,0:-1]
    testY = data[train_rows:,-1]

    # create a learner and train it
    learner = rt.RTLearner(leaf_size =  leaf_size) # create a LinRegLearner
    learner.addEvidence(trainX, trainY) # train it



    # evaluate in sample
    predY = learner.query(trainX) # get the predictions
    rmse = math.sqrt(((trainY - predY) ** 2).sum()/trainY.shape[0])
    c = np.corrcoef(predY, y=trainY)
    corr = c[0,1]
    in_sample = pd.DataFrame([[leaf_size,rmse,corr]],columns = insample_data.columns.values)
    insample_data = pd.concat([insample_data,in_sample],axis=0,ignore_index=True)

    # evaluate out of sample
    predY = learner.query(testX) # get the predictions
    rmse = math.sqrt(((testY - predY) ** 2).sum()/testY.shape[0])
    c = np.corrcoef(predY, y=testY)
    corr = c[0,1]
    out_sample = pd.DataFrame([[leaf_size,rmse,corr]],columns=outsample_data.columns.values)
    outsample_data = pd.concat([outsample_data,out_sample],axis=0,ignore_index=True)

print(insample_data)
print(outsample_data)
'''


#---------------------
#Change Bags
insample_data = pd.DataFrame(columns=['leaf_size','rmse','correlation'])
outsample_data = pd.DataFrame(columns=['leaf_size','rmse','correlation'])

for bags in range(40,81,20):

    leaf_size=10

    # compute how much of the data is training and testing
    #train_rows = math.floor(0.6* data.shape[0])
    sample_size = 500
    train_rows = math.floor(0.6* sample_size)
    #test_rows = data.shape[0] - train_rows
    test_rows = sample_size - train_rows
    # separate out training and testing data
    trainX = data[:train_rows,0:-1]
    trainY = data[:train_rows,-1]
    testX = data[train_rows:,0:-1]
    testY = data[train_rows:,-1]

    kwargs = {"leaf_size":leaf_size}
    learner = bl.BagLearner(learner=rt.RTLearner,bags=bags,**kwargs) # create a LinRegLearner
    learner.addEvidence(trainX, trainY) # train it
    #learner.query([[1,2,3,4,5,6,7,8,9,10,11],[0,0,0,0,0,0,0,0,0,0,11]])

    # evaluate in sample
    predY = learner.query(trainX) # get the predictions
    rmse = math.sqrt(((trainY - predY) ** 2).sum()/trainY.shape[0])
    c = np.corrcoef(predY, y=trainY)
    corr = c[0,1]
    in_sample = pd.DataFrame([[bags,rmse,corr]],columns = insample_data.columns.values)
    insample_data = pd.concat([insample_data,in_sample],axis=0,ignore_index=True)

    # evaluate out of sample
    predY = learner.query(testX) # get the predictions
    rmse = math.sqrt(((testY - predY) ** 2).sum()/testY.shape[0])
    c = np.corrcoef(predY, y=testY)
    corr = c[0,1]
    out_sample = pd.DataFrame([[bags,rmse,corr]],columns=outsample_data.columns.values)
    outsample_data = pd.concat([outsample_data,out_sample],axis=0,ignore_index=True)

print(insample_data)
print(outsample_data)
